package dev.jbang.jupyter;

import org.dflib.jjava.jupyter.channels.JupyterSocket;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.dflib.jjava.jupyter.channels.JupyterConnection;
import org.dflib.jjava.jupyter.kernel.KernelConnectionProperties;
import org.dflib.jjava.kernel.JavaKernel;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.logging.Level;


public class Main {

    // generated by maven build and used to fetch version for kernel info string
    private static final String POM_PROPERTIES = "META-INF/maven/dev.jbang/jbang-jupyter/pom.properties";

    public static void main(String[] args) throws Exception {
        if (args.length < 1) {
            throw new IllegalArgumentException("Missing connection file argument");
        }

        Path connectionFile = Paths.get(args[0]);
        if (!Files.isRegularFile(connectionFile)) {
            throw new IllegalArgumentException("Connection file '" + connectionFile + "' isn't a file.");
        }

        JupyterSocket.JUPYTER_LOGGER.setLevel(Level.WARNING);

        KernelConnectionProperties connProps = KernelConnectionProperties.parse(Files.readString(connectionFile));
        JupyterConnection connection = new JupyterConnection(connProps);

        //MavenDependencyResolver mavenResolver = new MavenDependencyResolver();

        Properties pomProps = loadPomProps();

        JavaKernel kernel = JBangKernel.jbangBuilder()
                .name("JBang")
                .version((String) pomProps.getOrDefault("version", ""))

                .extensionsEnabled(true)
                //.startupSnippets(Env.startupSnippets())
                //.compilerOpts(Env.compilerOpts())
                //.extraClasspath(Env.extraClasspath())
                .timeout(System.getenv("JBANG_KERNEL_TIMEOUT"))

               .lineMagic("load", new org.dflib.jjava.kernel.magics.LoadCodeMagic("", ".jsh", ".jshell", ".java", ".jjava"))

                // these classpath operations might be interesting to have with same names...but passthrough jbang for consistency...

               // .lineMagic("classpath", new ClasspathMagic())
               // .lineMagic("maven", new MavenMagic(mavenResolver))
               // .lineMagic("mavenRepo", new MavenRepoMagic(mavenResolver))
               // .lineMagic("loadFromPOM", new LoadFromPomLineMagic(mavenResolver))
               // .lineMagic("jars", new JarsMagic()) // TODO: deprecate redundant "jars" alias; "classpath" is a superset of this
               // .lineMagic("addMavenDependency", new MavenMagic(mavenResolver)) // TODO: deprecate redundant "addMavenDependency" alias
               // .cellMagic("loadFromPOM", new LoadFromPomCellMagic(mavenResolver))

                //TBD: since jbang kernel will automatically run this doesn't make much sense  .cellMagic("jbang", new JBangCellMagic())
                .lineMagic("jbang", new JBangLineMagic())
                .lineMagic("help", new HelpMagic())
                .build();

        kernel.becomeHandlerForConnection(connection);

        connection.connect();
        connection.waitUntilClose();
    }

    private static Properties loadPomProps() {

        Properties props = new Properties();

        InputStream in = Main.class.getClassLoader().getResourceAsStream(POM_PROPERTIES);
        if (in == null) {
            return props;
        }

        try {
            try (in) {
                props.load(in);
                return props;
            }
        } catch (IOException e) {
            // generally, this should be ignorable, but it should also never happen, so still rethrow
            throw new RuntimeException("Error reading project properties");
        }
    }
}
